{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","movie","key","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","setMovies","useState","query","setQuery","IsError","setIsError","isLoading","setIsLoading","preview","setPreview","onSubmit","event","preventDefault","fetch","then","res","json","catch","Response","getMovie","response","Poster","movieRequested","Title","Plot","imdbID","movieLoading","finally","htmlFor","type","id","placeholder","value","onChange","target","classNames","disabled","onClick","some","film","prevMovies","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e5eca3f1.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n  key: string,\n};\n\nexport const MovieCard: React.FC<Props> = ({\n  movie,\n  key,\n}) => (\n  <div\n    className=\"card\"\n    data-cy=\"movieCard\"\n    key={key}\n  >\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\nimport { getMovie } from '../../api';\nimport { MovieData } from '../../types/MovieData';\nimport { ResponseIsError } from '../../types/ReponseError';\nimport { Movie } from '../../types/Movie';\nimport './FindMovie.scss';\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  setMovies: React.Dispatch<React.SetStateAction<Movie[]>>;\n  movies: Movie[];\n};\n\nexport const FindMovie: React.FC<Props> = ({\n  setMovies,\n  movies,\n}) => {\n  const [query, setQuery] = useState('');\n  const [IsError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [preview, setPreview] = useState<Movie | null>(null);\n\n  const movieLoading = (response: MovieData) => {\n    const {\n      Poster: imgUrl,\n      Title: title,\n      Plot: description,\n      imdbID: imdbId,\n    } = response;\n\n    const movieRequested: Movie = {\n      imgUrl,\n      title,\n      description,\n      imdbId,\n      imdbUrl: `https://www.imdb.com/title/${response.imdbID}`,\n    };\n\n    if (imgUrl === 'N/A') {\n      movieRequested.imgUrl\n      = 'https://via.placeholder.com/360x270.png?text=no%20preview';\n    }\n\n    setPreview(movieRequested);\n  };\n\n  const handleSubmitClick = (event: React.FormEvent) => {\n    event.preventDefault();\n    setIsLoading(true);\n    getMovie(query)\n      .then((res: MovieData | ResponseIsError) => {\n        if ('Title' in res) {\n          movieLoading(res);\n        } else {\n          setIsError(true);\n        }\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  const onAdd = () => {\n    if (preview\n      && !movies.some(film => film.imdbId === preview.imdbId)) {\n      setMovies((prevMovies) => ([\n        ...prevMovies,\n        preview,\n      ]));\n    }\n\n    setPreview(null);\n    setQuery('');\n  };\n\n  const onChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setQuery(value);\n    setIsError(false);\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={handleSubmitClick}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={query}\n              onChange={onChangeQuery}\n            />\n          </div>\n\n          {IsError && (\n            <p className=\"help is-danger\" data-cy=\"IsErrorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames(\n                'button',\n                { 'is-light': !isLoading },\n                { 'is-loading': isLoading },\n              )}\n              disabled={!query}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {preview && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={onAdd}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {preview && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard\n            movie={preview}\n            key={preview.imdbId}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseIsError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=59db99f1';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseIsError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      IsError: 'unexpected IsError',\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          setMovies={setMovies}\n          movies={movies}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}